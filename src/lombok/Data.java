/*
 * Copyright Â© 2009 Reinier Zwitserloot and Roel Spilker.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package lombok;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Generates getters for all fields, a useful toString method, and hashCode and equals implementations that check
 * all non-transient fields. Will also generate setters for all non-final fields, as well as a constructor.
 * <p>
 * If any method to be generated already exists (in name - the return type or parameters are not relevant), then
 * that method will not be generated by the Data annotation.
 * <p>
 * The generated constructor will have 1 parameter for each final field. The generated toString will print all fields,
 * while the generated hashCode and equals take into account all non-transient fields.<br>
 * Static fields are skipped (no getter or setter, and they are not included in toString, equals, hashCode, or the constructor).
 * <p>
 * <code>toString</code>, <code>equals</code>, and <code>hashCode</code> use the deepX variants in the
 * <code>java.util.Arrays</code> utility class. Therefore, if your class has arrays that contain themselves,
 * these methods will just loop endlessly until the inevitable <code>StackOverflowError</code>. This behaviour
 * is no different from <code>java.util.ArrayList</code>, though.
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.SOURCE)
public @interface Data {
	/**
	 * The <code>@Data</code> annotation generates getters and setters for every non-static field in your class.
	 * If you'd like to suppress the generation of the getter, you can annotate the field with <code>@NoGetter</code>.
	 * <p>
	 * Setting this annotation without an accompanying <code>@Data</code> annotation is an error. Setting this annotation
	 * when there's also a <code>@Getter</code> annotation is also an error.
	 * 
	 * @see Data.NoSetter
	 */
	@Target(ElementType.FIELD)
	@Retention(RetentionPolicy.SOURCE)
	public @interface NoGetter {}
	
	/**
	 * The <code>@Data</code> annotation generates getters and setters for every non-static field in your class.
	 * If you'd like to suppress the generation of the setter, you can annotate the field with <code>@NoSetter</code>.
	 * <p>
	 * Setting this annotation without an accompanying <code>@Data</code> annotation is an error. Setting this annotation
	 * when there's also a <code>@Setter</code> annotation is also an error.
	 * 
	 * @see Data.NoGetter
	 */
	@Target(ElementType.FIELD)
	@Retention(RetentionPolicy.SOURCE)
	public @interface NoSetter {}
	
	/**
	 * Setting this variable is equal to adding <code>@ToString</code> and <code>@EqualsAndHashCode</code> annotations and setting
	 * the <code>callSuper</code> variable on them.
	 * 
	 * Setting both in conflict.
	 */
	boolean callSuper() default false;
	
	/**
	 * If you specify a static constructor name, then the generated constructor will be private, and
	 * instead a static factory method is created that other classes can use to create instances.
	 * We suggest the name: "of", like so:
	 * 
	 * <pre>
	 *     public @Data(staticConstructor = "of") class Point { final int x, y; }
	 * </pre>
	 * 
	 * Default: No static constructor, instead the normal constructor is public.
	 */
	String staticConstructor() default "";
}
